#!/bin/bash

set -o pipefail

do_find()
{
    local opts
    opts=()

    if [[ "$1" == "d" ]]; then
        opts+=(-type d -printf "%p/\n")
    elif [[ "$1" == "f" ]]; then
        opts+=(-type f -print -o -type l -print)
    else
        opts+=(-type d -printf "%p/\n" -o -type f -print -o -type l -print)
    fi

    if (( $2 > 0 )); then
        opts+=(-maxdepth "$2")
    fi

    find -L . -mindepth 1 -xdev -path '*/\.*' -prune -o "${opts[@]}" 2>/dev/null \
        | cut -b3-
}

do_fd()
{
    local opts
    opts=()

    if [[ "$1" == "d" ]]; then
        opts+=(--type d)
    elif [[ "$1" == "f" ]]; then
        opts+=(--type f --type l)
    fi

    if (( $2 > 0 )); then
        opts+=(-d "$2")
    fi

    fd -L --one-file-system --color=always "${opts[@]}" 2>/dev/null
}

CMD="$1"
shift

case "$CMD" in
    list)
        read -ra args <"$FZF_FILE_STATE"
        if command -v fd >/dev/null 2>&1; then
            do_fd "${args[@]}"
        else
            do_find "${args[@]}"
        fi
        ;;
    run)
        FZF_FILE_STATE=$(mktemp)
        export FZF_FILE_STATE

        fzf_args=()
        while (( ${#@} > 0 )); do
            if [[ "$1" == "--" ]]; then
                shift
                printf "%q " "$@" > "$FZF_FILE_STATE"
                break
            fi
            fzf_args+=("$1")
            shift
        done

        args=(a 0)
        if [[ "${#@}" != 0 ]]; then
            [[ $1 ]] && args[0]=$1
            [[ $2 ]] && args[1]=$2
        fi
        echo "${args[@]}" > "${FZF_FILE_STATE}"

        "$0" list \
            | fzf --ansi -m \
                --bind "ctrl-r:reload('$0' list)" \
                --bind "ctrl-d:reload('$0' toggle-depth && '$0' list)" \
                --bind "ctrl-r:reload('$0' cycle-type && '$0' list)" \
                --bind 'ctrl-t:execute(fzf-view fzf-view-file {})' \
                --preview 'fzf-view-file {} | head -500' \
                --preview-window hidden \
                "${fzf_args[@]}"

        rm -r "$FZF_FILE_STATE"
        ;;
    cycle-type)
        read -ra args <"$FZF_FILE_STATE"

        if [[ "${args[0]}" == "a" ]]; then
            args[0]=d
        elif [[ "${args[0]}" == "d" ]]; then
            args[0]=f
        else
            args[0]=a
        fi

        echo "${args[@]}" > "$FZF_FILE_STATE"
        ;;
    toggle-depth)
        read -ra args <"$FZF_FILE_STATE"

        if (( args[1] > 0 )); then
            args[1]=0
        else
            args[1]=1
        fi

        echo "${args[@]}" > "$FZF_FILE_STATE"
        ;;
esac
